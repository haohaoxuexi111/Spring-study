<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--注册bean-->
    <bean id="userService" class="com.xiang.service.UserServiceImpl"/>
    <bean id="log" class="com.xiang.log.Log"/>
    <bean id="afterLog" class="com.xiang.log.AfterLog"/>

    <!--切面由通知和切入点组成-->
    <!--方式一：使用原生的Spring API接口-->
    <!--配置aop：需要导入aop的约束-->
<!--    <aop:config>-->
<!--        切入点：expression:表达式，execution(返回值类型 包名.方法名 (参数)) 用来定位到要执行的位置-->
<!--        <aop:pointcut id="pointcut" expression="execution(* com.xiang.service.UserServiceImpl.*(..))"/>-->
<!--        执行环绕增强-->
<!--        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>-->
<!--        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>-->
<!--    </aop:config>-->

    <!--方式二：自定义类-->
<!--    <bean id="diy" class="com.xiang.diy.DiyPointCut"/>-->
<!--    <aop:config>-->
<!--        自定义切面，ref:要引用的类&ndash;-->
<!--        <aop:aspect ref="diy">-->
<!--            定义切入点-->
<!--            <aop:pointcut id="point" expression="execution(* com.xiang.service.UserServiceImpl.*(..))"/>-->
<!--            执行环绕增强-->
<!--            <aop:before method="before" pointcut-ref="point"/>-->
<!--            <aop:after method="after" pointcut-ref="point"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

    <!--方式三：使用注解-->
    <bean id="annotationAspect" class="com.xiang.diy.AnnotationAspect"/>
    <!--开启注解支持 基于接口JDK(默认proxy-target-class="false")和基于类cglib(proxy-target-class="true")两种代理模式-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>